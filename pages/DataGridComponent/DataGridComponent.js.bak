import * as React from "react";
import { DataGrid, GridActionsCellItem } from "@mui/x-data-grid";
import DeleteIcon from "@mui/icons-material/Delete";
import SecurityIcon from "@mui/icons-material/Security";
import FileCopyIcon from "@mui/icons-material/FileCopy";
import { useEffect } from "react";
import { baseURL } from "../../api";
import axios from "axios";

export default function ColumnTypesGrid({ formdata, formDetails }) {
  const [rows, setRows] = React.useState("");

  useEffect(() => {
    axios.get(baseURL + formdata.data.sDataSource).then(response => {
      setRows(true);
      response.data.map(row => (row["id"] = row[formDetails.sPrimaryKey]));
      setRows(response.data);
    });
  }, [rows.id]);

  const deleteItem = React.useCallback(
    id => () => {
      /*setTimeout(() => {
        setRows((prevRows) => prevRows.filter((row) => row.id !== id));
      }); */
      var data = {};
      var datasection = [];

      var mainrecord = {};

      let metadata = {
        sPrimarykey: formDetails.sPrimaryKey,
        id: formDetails.id,
        sPrimaryTable: formDetails.sPrimaryTable,
        sFormType: formDetails.sFormType,
        sPrimarykeyvalue: id
      };
      let headers = {
        "Content-type": "application/json"
      };

      datasection.push({ mainrecord: { mainrecord } });
      data["metadata"] = metadata;
      data["data"] = datasection;

      const uri = baseURL + formdata.data.sAction.actionDelete;

      axios
        .delete(uri, { headers, data })
        .then(result => {
          if (result.data) {
            if (result.data.metadata.status == "OK") {
              alert("Success");
              setTimeout(() => {
                setRows(prevRows => prevRows.filter(row => row.id !== id));
              });
            } else {
              alert(result.data.metadata.msg);
            }
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    []
  );

  const toggleAdmin = React.useCallback(
    id => () => {
      setRows(prevRows =>
        prevRows.map(row => (row.id === id ? { ...row, isAdmin: !row.isAdmin } : row))
      );
    },
    []
  );

  const duplicateUser = React.useCallback(
    id => () => {
      setRows(prevRows => {
        const rowToDuplicate = prevRows.find(row => row.id === id);
        return [...prevRows, { ...rowToDuplicate, id: Date.now() }];
      });
    },
    []
  );

  const columns = [];
  formdata?.fixcolumns?.forEach(item => {
    columns.push({
      field: item.sColumnID,
      headerName: item.sHeader,
      width: item.iWidth,
      editable: item.bEditable,
      type: item.sType,
      sortable: item.bSortable
    });
  });

  columns.push({
    field: "actions",
    type: "actions",
    headerName: "Actions",
    width: 150,
    getActions: params => [
      <GridActionsCellItem
        key="delete"
        icon={<DeleteIcon />}
        label="Delete"
        onClick={deleteItem(params.id)}
      />,
      <GridActionsCellItem
        key="toggle-admin"
        icon={<SecurityIcon />}
        label="Toggle Admin"
        onClick={toggleAdmin(params.index)}
        showInMenu
      />,
      <GridActionsCellItem
        key="duplicate"
        icon={<FileCopyIcon />}
        label="Duplicate User"
        onClick={duplicateUser(params.index)}
        showInMenu
      />
    ]
  });

  return (
    <div {...formdata?.component?.options?.others1}>
      <DataGrid columns={columns} rows={rows} />
    </div>
  );
}
